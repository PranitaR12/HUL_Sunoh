from logging import info
from datalab_sdk.auth.synchronous import SyncAuth
from datalab_sdk.config.environment import Environment


# Simple file-based token persistance: OK for script; not for web applications
# Uses SyncAuth flow
class SimplePersistedToken():

    @staticmethod
    def get_token(env: Environment, file_path: str) -> str:
        auth = SyncAuth(env)
        # read token from file to avoid endless auth requests
        try:
            with open(file_path) as file:
                info("Read token from file")
                token = file.read()
                if auth.is_valid(token):
                    return token
            return SimplePersistedToken.__renew_token(auth, file_path)
        except FileNotFoundError:
            return SimplePersistedToken.__renew_token(auth, file_path)

    @staticmethod
    def __renew_token(auth: SyncAuth, file_path: str) -> str:
        # perform auth and save to file
        token = auth.get_token()
        info("Acquired new token")
        with open(file_path, "w") as file:
            file.write(token)
        return token
