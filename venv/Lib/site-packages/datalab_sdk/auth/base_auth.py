import jwt
from logging import info, error
from datetime import datetime, timezone
from datalab_sdk.config.environment import (
    Environment,
    EnvironmentConfig
)
from typing import (
    Dict,
    Any
)

# base auth functions
class BaseAuth:

    def __init__(self, environment: Environment):
      self._env = environment

    # checks the validity of the token (not the integrity)
    def is_valid(self, token: str) -> bool:
        try:
            claims = jwt.decode(token, algorithms=["HS256"], options={"verify_signature": False})
            correct_app = claims["appid"] == EnvironmentConfig.get_appid(self._env)
            correct_audience = claims["aud"] == EnvironmentConfig.get_aud(self._env)
            in_time = self._is_in_time(claims)

            if not correct_app: info("Token issued to another app")
            if not correct_audience: info("Token issued for another audience")
            if not in_time: info("Token is expired")
            return correct_app and correct_audience and in_time
        except Exception as e:
            error(e)
            return False

    def _is_in_time(self, claims: Dict[str, Any]) -> bool:
        try:
          nbf = datetime.fromtimestamp(claims["nbf"], timezone.utc)
          exp = datetime.fromtimestamp(claims["exp"], timezone.utc)
          now = datetime.now(timezone.utc)
          return now >= nbf and now < exp
        except:
          return False # token lacking the correct data
