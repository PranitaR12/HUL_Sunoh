import sys
from datalab_sdk.config.environment import (
    Environment,
    EnvironmentConfig
)
from datalab_sdk.auth.asynchronous import AsyncAuth
from IPython.core.display import (
    HTML,
    display
)

# synchronous form of auth - use when need to suspend execution until auth has succeeded (or timed out)
class SyncAuth(AsyncAuth):

    def __init__(self, environment: Environment):
        super().__init__(environment=environment)

    # synchronous call to get a token by device flow
    def get_token(self) -> str:

        flow = self.start_auth_flow()

        # output the user instructions
        if EnvironmentConfig.in_notebook():
            display(HTML(self.__make_clickable(flow["message"])))
        else:
            print(flow["message"])
        sys.stdout.flush()  # Some terminal needs this to ensure the message is shown

        # immediately try to complete
        return self.complete_auth_flow(flow)

    def __make_clickable(self, x: str) -> str:
        return x.replace(
            "https://microsoft.com/devicelogin",
            '<a target="_blank" href="https://microsoft.com/devicelogin">https://microsoft.com/devicelogin</a>',
        )
