import msal
import json
from datalab_sdk.api.exceptions import AuthNotValid
from datalab_sdk.config.environment import (
    Environment,
    EnvironmentConfig
)
from datalab_sdk.auth.base_auth import BaseAuth
from typing import (
    Dict,
    Any
)

# asynchronous form of auth - use when need return to complete after use has completed the auth flow
class AsyncAuth(BaseAuth):

    def __init__(self, environment: Environment):
        super().__init__(environment=environment)
        # long lived instance, but we are not using the caching, as the use case is non-interactive
        # persisted token gives example of self caching
        self.__app = msal.PublicClientApplication(
            client_id=EnvironmentConfig.get_client_id(self._env), authority=EnvironmentConfig.get_authority_url()
        )

    # call to start the device flow
    def start_auth_flow(self) -> Dict[str, Any]:

        # initate flow and show the device code user needs to action
        flow = self.__app.initiate_device_flow(scopes=EnvironmentConfig.get_scopes(self._env))
        if "user_code" not in flow:
            raise AuthNotValid(
                "Fail to create device flow. Err: %s" % json.dumps(flow, indent=4)
            )
        return flow

    # synchronous call to get a token from completed device flow
    def complete_auth_flow(self, flow: Dict[str, Any]) -> str:

        # poll for user action to complete flow
        result = self.__app.acquire_token_by_device_flow(flow)
        if "access_token" in result:
            return result["access_token"]
        raise AuthNotValid("Unable to retrieve access token")
