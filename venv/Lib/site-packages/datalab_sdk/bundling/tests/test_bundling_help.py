import tarfile
from datalab_sdk.bundling.bundling_help import *
import os
from zipfile import ZipFile
import tarfile
import pytest


def test_bundle_app_with_files_to_bundle_creates_expected_tar_gz():
    EXPECTED_FILE_PATH = "expected_app_bundle.tar.gz"
    generated_file_path = create_temporary_file_path()

    # Run this from the directory we would usually put the bundle file in
    original_wd = os.getcwd()
    os.chdir("datalab_sdk/bundling/tests/files_to_bundle")

    def custom_function_to_add_text_file(bundle_path: str):
        custom_file = open(os.path.join(bundle_path, "added_by_custom_function.txt"), "w")
        custom_file.write("Generated during bundling") 
        custom_file.close() 

    try:
        generated_file_path = bundle_app(
            generated_file_path,
            required_paths=[
                "dummy_app/dummy_app.py",
                "dummy_app/dummy_asset.txt",
                "dummy_app/folder_to_get_subfolder_from/subfolder",
                "dummy_app/folder_to_get_file_from/other_file.py",
                "common/common_subfolder/useful.py",
                "dummy_app/Pipfile",
            ],
            optional_paths=[
                "dummy_app/__init__.py",
                "dummy_app/a_file_which_is_not_there.py",
                "dummy_app/folder_to_get_file_from/optional.txt",
            ],
            custom_functions=[
                custom_function_to_add_text_file,
            ],
            app_py_name="dummy_app",
        )

        os.chdir("..")
        expected_files_in_tar = get_files_in_tar_at_path(EXPECTED_FILE_PATH)
        actual_files_in_tar = get_files_in_tar_at_path(generated_file_path)

    finally:
        os.chdir(original_wd)

    # Try to cleanup before asserting
    try:
        os.remove(generated_file_path)
    except IOError:
        pass

    # Compare lists unordered
    assert set(actual_files_in_tar) == set(expected_files_in_tar)


def test_bundle_app_with_no_app_py_raises_exception():
    generated_file_path = create_temporary_file_path()

    # Run this from the directory we would usually put the bundle file in
    original_wd = os.getcwd()
    os.chdir("datalab_sdk/bundling/tests/files_to_bundle")

    with pytest.raises(FileNotFoundError) as e:
        try:
            generated_file_path = bundle_app(
                generated_file_path,
                required_paths=[
                    "dummy_app/dummy_app.py",
                    "dummy_app/dummy_asset.txt",
                    "dummy_app/folder_to_get_subfolder_from/subfolder",
                    "dummy_app/folder_to_get_file_from/other_file.py",
                    "common/common_subfolder/useful.py",
                    "dummy_app/Pipfile",
                ],
                optional_paths=[
                    "dummy_app/__init__.py",
                    "dummy_app/a_file_which_is_not_there.py",
                    "dummy_app/folder_to_get_file_from/optional.txt",
                ],
            )

        finally:
            os.chdir(original_wd)

        # Try to cleanup before asserting
        try:
            os.remove(generated_file_path)
        except IOError:
            pass

        assert("No app.py file in bundle. Add one or use the app_py_name argument to pass in one with an alternate name." in e.value.message)


def test_bundle_class_two_with_no_pipfile_raises_exception():
    generated_file_path = create_temporary_file_path()

    # Run this from the directory we would usually put the bundle file in
    original_wd = os.getcwd()
    os.chdir("datalab_sdk/bundling/tests/files_to_bundle")
    
    with pytest.raises(FileNotFoundError) as e:
        try:
            generated_file_path = bundle_app(
                generated_file_path,
                required_paths=[
                    "dummy_app/dummy_app.py",
                    "dummy_app/dummy_asset.txt",
                    "dummy_app/folder_to_get_subfolder_from/subfolder",
                    "dummy_app/folder_to_get_file_from/other_file.py",
                    "common/common_subfolder/useful.py",
                ],
                optional_paths=[
                    "dummy_app/__init__.py",
                    "dummy_app/a_file_which_is_not_there.py",
                    "dummy_app/folder_to_get_file_from/optional.txt",
                ],
                app_py_name="dummy_app",
            )

        finally:
            os.chdir(original_wd)

        # Try to cleanup before asserting
        try:
            os.remove(generated_file_path)
        except IOError:
            pass

        assert("No Pipfile file in bundle. Add one configured for building the app." in e.value.message)


def get_files_in_zip_at_path(file_path: str):
    with ZipFile(file_path, 'r') as zip_file:
        return zip_file.namelist()


def get_files_in_tar_at_path(file_path: str):
    tar = tarfile.open(file_path)
    members = tar.getmembers()
    tar.close()
    return [member.path for member in members]
