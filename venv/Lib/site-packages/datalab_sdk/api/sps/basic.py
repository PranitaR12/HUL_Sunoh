from logging import info, debug, error
from typing import Any, Dict, Type, TypeVar, Union, List, Callable, Mapping, Optional, cast

import requests
from marshmallow import ValidationError
from marshmallow_dataclass import class_schema

# want to make easy import for clients of SDK
from datalab_sdk.api.exceptions import *
from datalab_sdk.api.raw import RawClient, JSONResponseType
from datalab_sdk.config.environment import (
    Environment,
    EnvironmentConfig
)

# import the likely types so clients don't need to know where to find them
from datalab_sdk.api.sps.exceptions import *
from datalab_sdk.api.sps.types.basic_metadata import (
    SpsResponse
)

from datalab_sdk.api.common.schema import CamelCaseSchema

# want to read query paramaters
from flask import request
from datalab_sdk.logger import logger

INPUT_CLASS = TypeVar("INPUT_CLASS")
OUTPUT_CLASS = TypeVar("OUTPUT_CLASS")


class BasicSpsClient(RawClient):
    def __init__(self, environment: Environment = Environment.PROD):
        super().__init__(environment)

################################################################################
# ENDPOINTS
################################################################################

    def post_request(
        self,
        token: str, 
        req_data: dict,
        path: str = '',
        arg: str = ''
    ) -> SpsResponse:
        """Post request for sps.

        Arguments:
            token: str -- The auth token to use for the API call.
            path: str -- The path of sps API url
            arg: str -- The argument for sps API url
            req_data: dict -- Request info that needs to be provided for post request body 

        Returns:
            SpsResponse -- Post response of sps

        Errors:
            AuthNotValid - If token is invalid.
        """

        return self.__request_post(
            path=path,
            arg=arg,
            token=token,
            data=req_data,
            input_class=dict,
            not_found=None
        )
    
    def put_request(
        self,
        token: str, 
        req_data: dict,
        path: str = '',
        arg: str = ''
    ) -> SpsResponse:
        """Put request for sps.

        Arguments:
            token: str -- The auth token to use for the API call.
            path: str -- The path of sps API url
            arg: str -- The argument for sps API url
            req_data: dict -- Request info that needs to be provided for put request body 

        Returns:
            SpsResponse -- put response of sps

        Errors:
            AuthNotValid - If token is invalid.
        """

        return self.__request_put(
            path=path,
            arg=arg,
            token=token,
            data=req_data,
            input_class=dict,
            not_found=None
        )
    
    def get_request(
        self, 
        token: str, 
        path: str = '',
        arg: str = ''
    ) -> SpsResponse:
        """Get request for sps.

        Arguments:
            token: str -- The auth token to use for the API call.
            path: str -- The path of sps API url
            arg: str -- The argument for sps API url

        Returns:
            SpsResponse -- Post response of sps

        Errors:
            AuthNotValid - If token is invalid.
        """
        
        return self.__request_get(
            path=path,
            argument=arg,
            token=token,
            not_found=None
        )

################################################################################
# HELPERS
################################################################################

    def __request_post(
        self, 
        path: str, 
        arg: str,
        token: str,
        data: INPUT_CLASS,
        input_class: Type[INPUT_CLASS], 
        not_found: Union[Callable[[str], ResourceNotFound], None] = None,
    ):
        input_schema = class_schema(input_class, base_schema=CamelCaseSchema)

        # prepare input body - may be invalid
        try:
            body = input_schema().dump(data)
            info(body)
        except Exception as err:
            logger.debug(err)
            debug(err)
            raise InputNotValid("The provided body data did not match expected content for this API call")

        # make call
        url = EnvironmentConfig.get_sps_api_url(self._environment, path, arg)

        try:
            # can safely cast to JSONResponseType since parse_json defaults to True
            response = cast(JSONResponseType, self.post(url, token, body))
        except Exception as err:
            raise err

        # prepare outputs
        info(response)
        try:
            return response
        except:
            correlation_id = None
            if isinstance(response, Mapping) and "correlationId" in response:
                # capture correlation if present
                correlation_id = response["correlationId"]
            raise APIChanged("Could not parse response into output schema", correlation_id, 400)
    
    def __request_get(
        self, path: str, token: str, argument: str,
        not_found: Union[Callable[[str], ResourceNotFound], None] = None
    ):

        # make call
        url = EnvironmentConfig.get_sps_api_url(self._environment, path, argument)
    
        try:
            # can safely cast to JSONResponseType since parse_json defaults to True
            response = cast(JSONResponseType, self.get(url, token))
            
        except SpsNotFound as err:
            logger.debug(err)
            if not_found is not None:
                # Convert sps specific errors
                raise not_found(err.correlation_id)
            else:
                raise err

        # prepare outputs
        info(response)
        try:
            return response
        except:
            correlation_id = None
            if isinstance(response, Mapping) and "correlationId" in response:
                # capture correlation if present
                correlation_id = response["correlationId"]
            raise APIChanged("Could not parse response into output schema", correlation_id, 400)
    
    def __request_put(
        self, 
        path: str, 
        arg: str,
        token: str,
        data: INPUT_CLASS,
        input_class: Type[INPUT_CLASS], 
        not_found: Union[Callable[[str], ResourceNotFound], None] = None,
    ):
        input_schema = class_schema(input_class, base_schema=CamelCaseSchema)

        # prepare input body - may be invalid
        try:
            body = input_schema().dump(data)
            info(body)
        except Exception as err:
            logger.debug(err)
            debug(err)
            raise InputNotValid("The provided body data did not match expected content for this API call")

        # make call
        url = EnvironmentConfig.get_sps_api_url(self._environment, path, arg)

        try:
            # can safely cast to JSONResponseType since parse_json defaults to True
            response = cast(JSONResponseType, self.post(url, token, body))
        except Exception as err:
            raise err

        # prepare outputs
        info(response)
        try:
            return response
        except:
            correlation_id = None
            if isinstance(response, Mapping) and "correlationId" in response:
                # capture correlation if present
                correlation_id = response["correlationId"]
            raise APIChanged("Could not parse response into output schema", correlation_id, 400)