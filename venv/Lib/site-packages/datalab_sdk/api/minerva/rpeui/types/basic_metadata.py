from typing import List, Union
from marshmallow_dataclass import dataclass
from dataclasses import field
from datalab_sdk.api.common.schema import LowerCamelCaseSchema


@dataclass(base_schema=LowerCamelCaseSchema)
class TokenInformation:
    name: str
    email: str

@dataclass(base_schema=LowerCamelCaseSchema)
class VersionInformation:
    environment: str
    model_version: str
    database_version: str

@dataclass(base_schema=LowerCamelCaseSchema)
class PlmReferenceRecipe:
    plm_reference: str

@dataclass(base_schema=LowerCamelCaseSchema)
class RpeTfc:
    formulation_category: str
    formulation_type: str
    formulation_class: Union[str, None] = None
    formulation_sub_class: Union[str, None] = None

@dataclass(base_schema=LowerCamelCaseSchema)
class RpeInformation:
    name: Union[str, None] = None
    plant: Union[str, None] = None
    usage: Union[str, None] = None
    country: Union[str, None] = None
    tfc: Union[RpeTfc, None] = None

@dataclass(base_schema=LowerCamelCaseSchema)
class RpeIngredient:
    plm_reference: str
    quantity: float
    properties: dict = field(default_factory=dict)

@dataclass(base_schema=LowerCamelCaseSchema)
class FormulaRecipe:
    formula: List[RpeIngredient]
    plm_reference: Union[str, None] = None
    properties: dict = field(default_factory=dict)
    information: Union[RpeInformation, None] = None
    
@dataclass(base_schema=LowerCamelCaseSchema)
class CalculateRequest:
    recipe: Union[PlmReferenceRecipe, FormulaRecipe]
    scope: List[str]

@dataclass(base_schema=LowerCamelCaseSchema)
class CalculateMetadata:
    duration: float
    environment: str
    model_version: str
    database_version: str

@dataclass(base_schema=LowerCamelCaseSchema)
class CalculateResponse:
    recipe: Union[PlmReferenceRecipe, FormulaRecipe]
    properties: dict
    formula: List[RpeIngredient]
    metadata: CalculateMetadata
