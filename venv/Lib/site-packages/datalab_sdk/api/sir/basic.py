from logging import info, debug, error
from typing import Any, Dict, Type, TypeVar, Union, List, Callable, Mapping, cast

import requests
import json
import shutil

from marshmallow import ValidationError
from marshmallow_dataclass import class_schema

from datalab_sdk.api.common.schema import LowerCamelCaseSchema
from datalab_sdk.api.exceptions import * # want to make easy import for clients of SDK
from datalab_sdk.api.raw import RawClient, ResponseType, JSONResponseType
from datalab_sdk.config.environment import (
    Environment,
    EnvironmentConfig
)
from datalab_sdk.api.sir.types.substances import *
from datalab_sdk.logger import logger
from datalab_sdk.api.common.schema import CamelCaseSchema
from datalab_sdk.api.sir.exceptions import *

INPUT_CLASS = TypeVar("INPUT_CLASS")
OUTPUT_CLASS = TypeVar("OUTPUT_CLASS")

UpsertCallType=Callable[[str, str, Mapping[str,Any],bool], ResponseType]

class SirBasicClient(RawClient):
    def __init__(self, environment: Environment = Environment.PROD):
        super().__init__(environment)

    def get_substances_by_name(
      self, token, term: str
    ) -> Substances:
        """Get the details about substances where the name matches the given search term

        Arguments:
            token: str -- The auth token to use for the API call
            term: str -- The search term used to match the name

        Returns:
            Substances - details of the matching substances

        Errors:
            AuthNotValid - if token is invalid
        """
        url = EnvironmentConfig.get_public_api_url(self._environment, f"/sir/api/v1/Substances/SubstanceDetails?name={term}")
        response = cast(JSONResponseType, self.get(url, token))
        info(response)

        # Map the response to a response object
        # We cannot map a top-level list, so put it inside a json object and map that
        jsonWrapper = {"content": response }
        output_schema = class_schema(SubstancesResponse)
        try:
            mapped = cast(SubstancesResponse, output_schema().load(jsonWrapper))
        except:
            correlation_id = None
            if isinstance(response, Mapping) and "correlationId" in response:
                  # capture correlation if present
                  correlation_id = response["correlationId"]
            raise APIChanged("Could not parse response into output schema", correlation_id, 400)

        # We don't need to return the search term, so extract just the substance details from the response
        return Substances(substances = mapped.content[0].results)
    
    def get_request(
        self, 
        token: str, 
        path: str = '',
        arg: str = ''
    ) -> SirGetResponse:
        """Get request for sir.

        Arguments:
            token: str -- The auth token to use for the API call.
            path: str -- The path of sir API url
            arg: str -- The argument for sir API url

        Returns:
            SirGetResponse -- get response of sir

        Errors:
            AuthNotValid - If token is invalid.
        """
        
        return self.__request_get(
            path=path,
            argument=arg,
            token=token,
            output_class=SirGetResponse,
            not_found=None
        )
    
################################################################################
# HELPERS
################################################################################
    
    def __request_get(
        self, path: str, token: str, argument: str,
        output_class: Type[OUTPUT_CLASS],
        not_found: Union[Callable[[str], ResourceNotFound], None] = None
    ) -> OUTPUT_CLASS:
        output_schema = class_schema(output_class, base_schema=CamelCaseSchema)

        # make call
        url = EnvironmentConfig.get_sir_api_url(self._environment, path, argument)

        try:
            # can safely cast to JSONResponseType since parse_json defaults to True
            response = cast(JSONResponseType, self.get(url, token))
            jsonWrapper = {"Content": response }

        except SirNotFound as err:
            logger.debug(err)
            if not_found is not None:
                # Convert sir specific errors
                raise not_found(err.correlation_id)
            else:
                raise err

        # prepare outputs
        info(jsonWrapper)
     
        try:
            return output_schema().load(jsonWrapper)
        except:
            correlation_id = None
            if isinstance(response, Mapping) and "correlationId" in response:
                # capture correlation if present
                correlation_id = response["correlationId"]
            raise APIChanged("Could not parse response into output schema", correlation_id, 400)
