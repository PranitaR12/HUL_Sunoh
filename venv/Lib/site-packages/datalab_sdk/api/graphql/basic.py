from datalab_sdk.api.raw import RawClient, JSONResponseType
from datalab_sdk.config.environment import Environment, EnvironmentConfig
from datalab_sdk.api.graphql.types.graphql import (GraphqlRequest,GraphqlResponse)
from typing import Type, TypeVar, Mapping, cast
from marshmallow_dataclass import class_schema
from datalab_sdk.api.common.schema import LowerCamelCaseSchema
from logging import info, debug
from datalab_sdk.api.exceptions import APIChanged, InputNotValid

INPUT_CLASS = TypeVar("INPUT_CLASS")
OUTPUT_CLASS = TypeVar("OUTPUT_CLASS")

class BasicGraphqlClient(RawClient):
    def __init__(self, environment: Environment = Environment.PROD):
        super().__init__(environment)

    def get_msks_graphql_data(self,token:str,data:GraphqlRequest) -> GraphqlResponse:
        """Gets the msks data for  given resolver methods.

        Arguments:
            token: str -- The auth token to use for the API call.
            query: str -- Graphql query to get the desired output
            variables: object -- Any key-value varaibale required for graphql query
            operationName: str -- name of graphql operation

        Returns:
            JSONResponseType -- Graphql response.

        Errors:
            AuthNotValid - If token is invalid.
        """
        return self.__request_post(
            path= f"/msks/graphql",
            token=token,
            data=data,
            input_class=GraphqlRequest,
            output_class=GraphqlResponse
        )

    def get_naturals_graphql_data(self,token:str,data:GraphqlRequest) -> GraphqlResponse:
        """Gets the naturals data for  given resolver methods.

        Arguments:
            token: str -- The auth token to use for the API call.
            query: str -- Graphql query to get the desired output
            variables: object -- Any key-value varaibale required for graphql query
            operationName: str -- name of graphql operation

        Returns:
            JSONResponseType -- Graphql response.

        Errors:
            AuthNotValid - If token is invalid.
        """
        return self.__request_post(
            path= f"/naturals/query",
            token=token,
            data=data,
            input_class=GraphqlRequest,
            output_class=GraphqlResponse
        )


####################################################################################
# Helper
####################################################################################
        
    def __request_post(
            self,
            path:str,
            token:str,
            data:GraphqlRequest, 
            input_class: Type[INPUT_CLASS], 
            output_class: Type[OUTPUT_CLASS]
        ) -> OUTPUT_CLASS:
        
        input_schema = class_schema(input_class, base_schema=LowerCamelCaseSchema)
        # prepare input body - may be invalid
        try:
            body = input_schema().dump(data)
            info(body)
        except Exception as err:
            debug(err)
            raise InputNotValid("The provided body data did not match expected content for this API call")

        #make call
        url = EnvironmentConfig.get_public_api_url(self._environment, path)
        #Â Otherwise, handle output schema
        output_schema = class_schema(output_class, base_schema=LowerCamelCaseSchema)
        try:
            # can safely cast to JSONResponseType since parse_json defaults to True
            response = cast(JSONResponseType, self.post(url, token, body))
        except Exception as err:
            raise err
        
        # prepare outputs
        info(response)
        if isinstance(response, Mapping) and "errors" in response:
            raise  APIChanged( response["errors"][0]['message'],  response["errors"][0]['extensions']['code'], 500)
        try:
            return output_schema().load(response)
        except:
            errorMessage:str = "Could not parse response into output schema"
            if isinstance(response, Mapping) and "errors" in response:
                # capture error if present
                errorMessage = response["errors"][0]['message']
            raise APIChanged(errorMessage, errorMessage, 500)
    
