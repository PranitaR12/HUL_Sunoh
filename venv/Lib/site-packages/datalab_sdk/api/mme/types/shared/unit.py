from marshmallow_dataclass import dataclass
from dataclasses import field
from typing import Union
from datalab_sdk.api.common.schema import CamelCaseSchema

# Helper to give consistency in unit families
class UnitFamily():

    VELOCITY : str = "Velocity" # eg m//s
    ACCELERATION : str = "Acceleration" # eg m//s^2

    CONCENTRATION : str  = "Concentration" # eg mg//L
    LENGTH : str = "Length" # eg m
    AREA : str  = "Area" # eg cm^2
    VOLUME : str  = "Volume" # eg L
    MASS : str  = "Mass" # eg Kg

    DENSITY : str = "Density" # eg g//cm^2

    DOSAGE : str = "Dosage" # eg mg//cm^2//day
    CONSUMPTION : str = "Consumption" # eg L//person//year

    DURATION : str  = "Duration" # eg day
    FREQUENCY : str  = "Frequency" # eg times//day

    PRESSURE : str = "Pressure" # eg Pa
    TEMPERATURE : str = "Temperature" # eg Â°C
    RAINFALL : str = "Rainfall" # eg mm//year

    MONEY : str = "Money" # eg USD

    RATIO : str = "Ratio" # eg %

    NONE : str  = "None"

@dataclass(base_schema=CamelCaseSchema)
class Unit:
    family: Union[str, None] = None
    unit_name: Union[str, None] = None

    @classmethod
    def Unknown(cls):
        return cls(UnitFamily.NONE, "TBC")

    @classmethod
    def Unitless(cls):
        return None
