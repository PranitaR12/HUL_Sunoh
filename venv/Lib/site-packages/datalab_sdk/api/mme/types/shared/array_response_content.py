from marshmallow_dataclass import dataclass
from typing import cast, Union, List
from datalab_sdk.api.mme.types.shared.list_value import ListValue
from datalab_sdk.api.mme.types.shared.time_point import TimePoint
from datalab_sdk.api.mme.types.shared.named_value import NamedValue
from datalab_sdk.api.mme.types.shared.component_ingredient import ComponentIngredient
from datalab_sdk.api.common.schema import CamelCaseSchema
from datetime import datetime
import iso8601

RawValue = Union[
    List[str],
    List[float],
    List[int],
    List[datetime],
    List[bool],
    List[ListValue],
    List[TimePoint],
    List[ComponentIngredient],
    List[NamedValue],
]


@dataclass(base_schema=CamelCaseSchema)
class ArrayResponseContent:
    strings: Union[List[str], None] = None
    numbers: Union[List[float], List[int], None] = None
    dates: Union[List[str], None] = None
    booleans: Union[List[bool], None] = None
    list_values: Union[List[ListValue], None] = None
    time_points: Union[List[TimePoint], None] = None
    named_values: Union[List[NamedValue], None] = None
    component_ingredients: Union[List[ComponentIngredient], None] = None

    def dates_as_datetimes(self) -> Union[List[datetime], None]:
        return list(map(lambda x: iso8601.parse_date(x), self.dates)) if self.dates is not None else None

    @classmethod
    def from_raw(cls, x: RawValue):
        if isinstance(x[0], str):
            return cls(strings=cast(List[str], x))
        elif isinstance(x[0], datetime):
            d = list(map(lambda y: y.isoformat().split('T')[0], cast(List[datetime], x)))
            return cls(dates=cast(List[str], d))
        elif isinstance(x[0], bool):
            return cls(booleans=cast(List[bool], x))
        elif isinstance(x[0], (int, float)):
            return cls(numbers=cast(List[float], x))
        elif isinstance(x[0], ListValue):
            return cls(list_values=cast(List[ListValue], x))
        elif isinstance(x[0], TimePoint):
            return cls(time_points=cast(List[TimePoint], x))
        elif isinstance(x[0], NamedValue):
            return cls(named_values=cast(List[NamedValue], x))
        elif isinstance(x[0], ComponentIngredient):
            return cls(component_ingredients=cast(List[ComponentIngredient], x))
        else:
            raise Exception("Unknown type")
