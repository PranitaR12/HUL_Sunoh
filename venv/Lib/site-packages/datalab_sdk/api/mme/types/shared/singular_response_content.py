from marshmallow_dataclass import dataclass
from typing import Union
from datalab_sdk.api.mme.types.shared.list_value import ListValue
from datalab_sdk.api.mme.types.shared.time_point import TimePoint
from datalab_sdk.api.mme.types.shared.named_value import NamedValue
from datalab_sdk.api.mme.types.shared.component_ingredient import ComponentIngredient
from datalab_sdk.api.common.schema import CamelCaseSchema
from datetime import datetime
import iso8601

RawValue = Union[
    str,
    float,
    int,
    datetime,
    bool,
    ListValue,
    TimePoint,
    ComponentIngredient,
    NamedValue,
]

@dataclass(base_schema=CamelCaseSchema)
class SingularResponseContent:
    string: Union[str, None] = None
    number: Union[float, int, None] = None
    date: Union[str, None] = None
    boolean: Union[bool, None] = None
    list_value: Union[ListValue, None] = None
    time_point: Union[TimePoint, None] = None
    named_value: Union[NamedValue, None] = None
    component_ingredient: Union[ComponentIngredient, None] = None

    def date_as_datetime(self) -> Union[datetime, None]:
        return iso8601.parse_date(self.date) if self.date is not None else None

    @classmethod
    def from_raw(cls, x: RawValue):
        if isinstance(x, str):
            return cls(string=x)
        elif isinstance(x, datetime):
            return cls(date=x.isoformat().split('T')[0])
        elif isinstance(x, bool):
            return cls(boolean=x)
        elif isinstance(x, (int, float)):
            return cls(number=x)
        elif isinstance(x, ListValue):
            return cls(list_value=x)
        elif isinstance(x, TimePoint):
            return cls(time_point=x)
        elif isinstance(x, NamedValue):
            return cls(named_value=x)
        elif isinstance(x, ComponentIngredient):
            return cls(component_ingredient=x)
        else:
            raise Exception("Unknown type")
