from marshmallow_dataclass import dataclass
from typing import Union
from datalab_sdk.api.common.schema import CamelCaseSchema
from datetime import datetime
import iso8601

@dataclass(base_schema=CamelCaseSchema)
class NamedValue:
    name: str
    number: Union[float, int, None] = None
    string: Union[str, None] = None
    date: Union[str, None] = None
    boolean: Union[bool, None] = None

    def date_as_datetime(self) -> Union[datetime, None]:
        return iso8601.parse_date(self.date) if self.date is not None else None

    @classmethod
    def with_datetime(
        cls,
        name: str,
        date: datetime
    ):
        return cls(name=name, date=date.isoformat().split('T')[0])

    def __str__(self):
        if self.string is not None:
            return f"{self.name}={self.string}"
        if self.number is not None:
            return f"{self.name}={self.number}"
        if self.date is not None:
            return f"{self.name}={self.date}"
        if self.boolean is not None:
            return f"{self.name}={self.boolean}"
        return ""
