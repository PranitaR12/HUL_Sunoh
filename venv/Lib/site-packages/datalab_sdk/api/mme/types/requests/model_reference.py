from marshmallow_dataclass import dataclass
from datalab_sdk.api.common.schema import CamelCaseSchema
from typing import Union
@dataclass(base_schema=CamelCaseSchema)
class ModelReference:
    business_domain: str
    business_key: str    
    version: Union[str, None]

    def __init__(self, business_domain, business_key, version= None):
     self.business_domain = business_domain
     self.business_key = business_key
     self.version = version  

    def __ne__(self, other):
        return not self.__eq__(other)

    def __hash__(self):        
        return hash("{}.{}".format(self.business_key,self.business_domain))

@dataclass(base_schema=CamelCaseSchema)
class FixedModelReference(ModelReference):  
       
    
    def __init__(self, business_domain, business_key, version):            
            super().__init__(business_domain, business_key, version)

    def __str__(self) -> str: 
        if self.version:
         return self.business_domain.upper() + "/" + self.business_key.upper() + "/" + self.version.upper()
        else:
         return self.business_domain.upper() + "/" + self.business_key.upper()

    def __eq__(self, other):
      
            return (
                self.business_key.lower() == other.business_key.lower()
                and self.business_domain.lower() == other.business_domain.lower()
                and self.version.lower() == other.version.lower()
            )
          

    def __hash__(self):
        return hash("{}.{}.{}".format(self.business_key,self.business_domain,self.version))

@dataclass(base_schema=CamelCaseSchema)
class SoftModelReference(ModelReference):  

    def __init__(self, business_domain, business_key):
     super().__init__(business_domain, business_key) 

    def __str__(self) -> str:       
        return self.business_domain.upper() + "/" + self.business_key.upper()   
   
    def __eq__(self, other):        
        return (
                self.business_key.lower() == other.business_key.lower()
                and self.business_domain.lower() == other.business_domain.lower()                
            )
         

