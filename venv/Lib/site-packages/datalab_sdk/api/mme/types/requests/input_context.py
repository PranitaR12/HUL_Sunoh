from marshmallow_dataclass import dataclass
from datalab_sdk.api.mme.types.shared.datum_key import DatumKey
from typing import List, Union
from datalab_sdk.api.exceptions import InputNotValid
from datalab_sdk.api.mme.types.requests.context_path import ContextPath
from datalab_sdk.api.mme.types.requests.context import Context
from datalab_sdk.api.mme.types.shared.response import Response
from datalab_sdk.api.common.schema import CamelCaseSchema


@dataclass(base_schema=CamelCaseSchema)
class InputContext:
    datum_key: DatumKey
    selected_context_paths: Union[List[ContextPath], None] = None
    needed_contexts: Union[List[Context], None] = None
    resolved_response: Union[Response, None] = None

    # guard path adding to check don't have over-loose specification
    def add_path(self, context_key: str, context_value_keys: List[str]):

        if self.selected_context_paths is None:
            self.selected_context_paths = []

        if (
            len(list(filter(lambda cp: len(cp.context_value_keys) > 1, self.selected_context_paths))) >= 1
            and len(context_value_keys) > 1
        ):
            raise InputNotValid("A maximum of 1 selected path is permitted to have multiple keys")
        self.selected_context_paths.append(ContextPath(context_key, context_value_keys))
