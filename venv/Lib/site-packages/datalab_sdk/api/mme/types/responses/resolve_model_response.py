from marshmallow_dataclass import dataclass
from dataclasses import field
from datalab_sdk.api.common.schema import CamelCaseSchema
from datalab_sdk.api.mme.types.shared.enums import ModelState, ModelClass
from datalab_sdk.api.mme.types.requests.model_reference import FixedModelReference, ModelReference
from typing import List, Union

@dataclass(base_schema=CamelCaseSchema)
class ModelResolveResult:   
    model_reference: ModelReference
    available: bool
    suitable_state: bool
    resolved_id: Union[str, None]
    resolved_classification: ModelClass = field(metadata=dict(by_value=True))
    failure_reason: Union[str, None]
    Compatible: Union[str, dict, None]

@dataclass(base_schema=CamelCaseSchema)
class ResolveModelResults:
    resolve_results: List[ModelResolveResult]
       
    def get_model_result(self, model_reference: ModelReference):
      """
      Retrieves the model ModelResolveResult for the specific model reference
      """
      
      for result in self.resolve_results:
          if result.model_reference == model_reference:
              return result
      return None

