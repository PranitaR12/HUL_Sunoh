from datalab_sdk.api.raw import RawClient, JSONResponseType
from datalab_sdk.config.environment import Environment
from logging import info, debug
from typing import Type, TypeVar, cast
from datalab_sdk.config.environment import Environment, EnvironmentConfig
from datalab_sdk.api.bulk.types.bulk_types import (
    IsLockedRequest, 
    IsObsoleteRequest, 
    TerminationDateRequest, 
    TagsRequest, 
    IndividualAccessRequest,
    AccessGroupRequest,
    BulkAPIResponse
)

from datalab_sdk.api.common.schema import LowerCamelCaseSchema, CamelCaseSchema
from logging import info, debug
from datalab_sdk.api.exceptions import APIChanged, InputNotValid
from marshmallow_dataclass import class_schema

INPUT_CLASS = TypeVar("INPUT_CLASS")
OUTPUT_CLASS = TypeVar("OUTPUT_CLASS")

class BasicBulkClient(RawClient):
    def __init__(self, environment: Environment = Environment.PROD):
        super().__init__(environment)

    def change_owner_of_all_repositories(self,token:str,datasetId:str,ownerId:str) -> BulkAPIResponse:
        """Capability to change the owner of all repositories in a dataset

        Arguments:
            token: str -- The auth token to use for the API call.
            datasetId: str -- datasetId of dataset.
            ownerId: str -- ownerId of repositorie.

        """

        return self.__request_put(
            path=f"/{datasetId}/owner/{ownerId}",
            token=token,
            request_body=None,
            input_class=dict,
            output_class=BulkAPIResponse
        )
    
    def set_locked_or_unlocked_of_all_repositories_in_dataset(self,token:str,datasetId:str,body:IsLockedRequest) -> BulkAPIResponse:
        """Capability to set all repos in a dataset as locked/unlocked

        Arguments:
            token: str -- The auth token to use for the API call.
            datasetId: str -- datasetId of dataset.
            body:IsLockedRequest -- Pass IsLocked value as true or false in request body
        """

        return self.__request_put(
            path=f"/{datasetId}/islocked",
            token=token,
            request_body=body,
            input_class=IsLockedRequest,
            output_class=BulkAPIResponse
        )
    
    def set_obsolete_or_notobsolete_of_all_repositories_in_dataset(self,token:str,datasetId:str,body:IsObsoleteRequest) -> BulkAPIResponse:
        """Capability to set all repos in a dataset as obsolete/not obsolete

        Arguments:
            token: str -- The auth token to use for the API call.
            datasetId: str -- datasetId of dataset.
            body:IsObsoleteRequest: boolean -- Pass IsObsolete as true or false in request body
        """

        return self.__request_put(
            path=f"/{datasetId}/isobsolete",
            token=token,
            request_body=body,
            input_class=IsObsoleteRequest,
            output_class=BulkAPIResponse
        )
    
    def set_termination_of_all_repositories_in_dataset(self,token:str,datasetId:str,body:TerminationDateRequest) -> BulkAPIResponse:
        """Capability to set all repos in a dataset to have the given termination date

        Arguments:
            token: str -- The auth token to use for the API call.
            datasetId: str -- datasetId of dataset.
            body: TerminationDateRequest -- Pass TerminationDate value in request body
        """
        return self.__request_put(
            path=f"/{datasetId}/terminationdate",
            token=token,
            request_body=body,
            input_class=TerminationDateRequest,
            output_class=BulkAPIResponse
        )
    
    
    def set_access_groups_of_all_repositories_in_dataset(self,token:str,datasetId:str,body:AccessGroupRequest) -> BulkAPIResponse:
        """Capability to set all repos in a dataset to have the given access groups

        Arguments:
            token: str -- The auth token to use for the API call.
            datasetId: str -- datasetId of dataset.
            body: AccessGroupRequest -- Pass AccessGroups in request body
        """

        return self.__request_put(
            path=f"/{datasetId}/access",
            token=token,
            request_body=body,
            input_class=AccessGroupRequest,
            output_class=BulkAPIResponse
        )

    def modify_tags_of_all_repositories_in_dataset(self,token:str,datasetId:str,body:TagsRequest) -> BulkAPIResponse:
        """Capability to modify all repos in a dataset to add and remove the given tags

        Arguments:
            token: str -- The auth token to use for the API call.
            datasetId: str -- datasetId of dataset.
            body: TagsRequest: -- Tags details associated with request body

        """
        return self.__request_put(
            path=f"/{datasetId}/tags",
            token=token,
            request_body=body,
            input_class=TagsRequest,
            output_class=BulkAPIResponse
        )

    def modify_individual_access_of_all_repositories_in_dataset(self,token:str,datasetId:str,body:IndividualAccessRequest) -> BulkAPIResponse:
        """Capability to modify all repos in a dataset to give the given users individual access

        Arguments:
            token: str -- The auth token to use for the API call.
            datasetId: str -- datasetId of dataset.
            body: IndividualAccessRequest: -- IndividualAccess details associated with request body
        """
        return self.__request_put(
            path=f"/{datasetId}/individualaccess",
            token=token,
            request_body=body,
            input_class=IndividualAccessRequest,
            output_class=BulkAPIResponse
        )
####################################################################################
# Helper
####################################################################################
        
    def __request_put(
            self,
            path:str,
            token:str,
            request_body,
            input_class: Type[INPUT_CLASS], 
            output_class: Type[OUTPUT_CLASS]
            ) -> OUTPUT_CLASS:
        url = EnvironmentConfig.get_bulk_api_url(self._environment, path,"")
        if request_body is not None:
            input_schema = class_schema(input_class, base_schema=CamelCaseSchema)
            # prepare input body - may be invalid
            try:
                body = input_schema().dump(request_body)
                info(body)
            except Exception as err:
                debug(err)
                raise InputNotValid("The provided body data did not match expected content for this API call")
        else:
            body= request_body
        #Â Otherwise, handle output schema
        output_schema = class_schema(output_class, base_schema=LowerCamelCaseSchema)
        try:
            response = cast(JSONResponseType, self.put(url, token, body))
            info(response)
            return  output_schema().load(response)
        except Exception as err:
             print(err)
             raise err