from logging import info, debug, error
from typing import Any, Dict, Type, TypeVar, Union, List, Callable, Mapping, cast

import requests
import json
import shutil

from marshmallow import ValidationError
from marshmallow_dataclass import class_schema

from datalab_sdk.api.exceptions import * # want to make easy import for clients of SDK
from datalab_sdk.api.raw import RawClient, ResponseType, JSONResponseType
from datalab_sdk.config.environment import (
    Environment,
    EnvironmentConfig
)
from datalab_sdk.api.plm.schemas import *
from datalab_sdk.api.plm.exceptions import *
from datalab_sdk.api.plm.types.recipe import ExplodeRecipeQuery
from datalab_sdk.api.plm.types.recipe import ExplodeRecipeRequest
from datalab_sdk.api.plm.types.recipe import ExplodeRecipeResponse
from datalab_sdk.logger import logger

INPUT_CLASS = TypeVar("INPUT_CLASS")
OUTPUT_CLASS = TypeVar("OUTPUT_CLASS")
UpsertCallType=Callable[[str, str, Mapping[str,Any],bool], ResponseType]

class PlmBasicClient(RawClient):
    def __init__(self, environment: Environment = Environment.PROD):
        super().__init__(environment)

    def explode_recipe(
      self, token, explodeQuery: ExplodeRecipeQuery
    ) -> ExplodeRecipeResponse:
        """Explodes a recipe 

        Arguments:
            token: str -- The auth token to use for the API call
            explodeQuery: ExplodeRecipeQuery -- The request for exploding a recipe

        Returns:
            ExplodeRecipeResponse - Exploded recipe levels and flattened recipe

        Errors:
            AuthNotValid - if token is invalid
        """

        # Wrap the query in a request object for mapping
        # The user does not need to know about this
        return self.__request_post(
            path="mule-rnd-e-recipeapi-v1/api/explodeRecipe?plmVer=v2",
            token=token,
            data=ExplodeRecipeRequest(explode_recipe_query = explodeQuery),
            input_class=ExplodeRecipeRequest,
            output_class=ExplodeRecipeResponse,
            not_found=lambda x: RecipeNotFound(explodeQuery.recipe_key, x),
        )

    def __request_post(
        self, path: str, token: str, data: INPUT_CLASS,
        input_class: Type[INPUT_CLASS], output_class: Type[OUTPUT_CLASS],
        not_found: Union[Callable[[str], ResourceNotFound], None] = None
    ) -> OUTPUT_CLASS:
        # Define input schema here, while output schema uses the dataclass attribute (currently being ignored?)
        input_schema = class_schema(input_class, base_schema=PlmSchema)
        output_schema = class_schema(output_class, base_schema=PlmSchema)

        # Prepare input body - may be invalid
        try:
            body = input_schema().dump(data)
            info(body)
        except Exception as err:
            logger.debug(err)
            debug(err)
            raise InputNotValid("The provided body data did not match expected content for this API call")

        # Make the call
        url = EnvironmentConfig.get_public_api_url(self._environment, "plm/" + path)

        try:
            # can safely cast to JSONResponseType since parse_json defaults to True
            response = cast(JSONResponseType, self.post(url, token, body))
        except ResourceNotFound as err:
            logger.debug(err)
            if not_found is not None:
                raise not_found(err.correlation_id)
            else:
                raise err
        
        # The API can return json with its error
        info(response)
        if (isinstance(response, Mapping) and "STATUSCODE" in response and response["STATUSCODE"] != 200 and response["STATUSCODE"] != '201'):
            raise APIChanged(response["STATUSMESSAGE"], response["STATUSCODE"], response["CORRELATIONID"])

        # Parse outputs
        try:
            return output_schema().load(response)
        except:
            correlation_id = None
            if isinstance(response, Mapping) and "CORRELATIONID" in response:
                  # capture correlation if present
                  correlation_id = response["CORRELATIONID"]
            raise APIChanged("Could not parse response into output schema", correlation_id, 400)