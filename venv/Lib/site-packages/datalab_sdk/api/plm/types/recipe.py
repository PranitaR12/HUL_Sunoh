from marshmallow_dataclass import dataclass
from datalab_sdk.api.plm.schemas import *
from typing import List
from datetime import datetime

@dataclass(base_schema=PlmSchema)
class ExplodeRecipeQuery:
    key_date: str #datetime
    recipe_key: str
    preferred_alt: str
    cross_plant: str
    copackexcl: str
    explosion_stop: str
    quantity: str
    uom: str
    flat_recipe: str
    los_pure_aggregation: str
    los_all_pure_list: str

@dataclass(base_schema=PlmSchema)
class ExplodeRecipeRequest:
    explode_recipe_query: ExplodeRecipeQuery

@dataclass(base_schema=PlmSchema)
class ExplodedRecipe:
    recipe_level: int
    specification_alt_version: str
    plant: str
    parent_key: str
    material: str
    material_desc: str
    authorization_flag: str
    saleable_flag: str
    expl_stop_flag: str
    preferred_flag: str
    valid_from: str #datetime
    valid_to: str #datetime
    quantity_per_item: float
    uom: str
    quantity_per_po: float
    change_no: str
    item_type: str
    description: str
    item_type_desc: str
    specification_type: str
    status_desc: str
    comp_type: str
    auth_grp: str
    plant_desc: str
    tree_level: str
    recipe_number: str
    inherit_key: str
    source_plant: str
    saleable_intermediate: str
    item_no: int

@dataclass(base_schema=PlmSchema)
class FlattenedRecipe:
    component: str
    component_descr: str
    material: str
    material_descr: str
    quantity: str
    uom: str

@dataclass(base_schema=PlmSchema)
class ExplodeRecipeResponse:
    exploded_recipe: List[ExplodedRecipe]
    flattened_recipe: List[FlattenedRecipe]
