import marshmallow
from marshmallow_dataclass import class_schema
from datalab_sdk.api.common.utils import upper_camel_case_dict_keys
from typing import (
    Union,
    Mapping,
    Iterable,
    Any,
    TypeVar,
    Type
)

# Schema for UpperCamelCase (also known as Pascal case)
class CamelCaseSchema(marshmallow.Schema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_dump(pass_many=False)
    def remove_none(self, data, **kwargs):
        if isinstance(data, dict):
            return {k: v for k, v in data.items() if v is not None}
        return data

    def on_bind_field(self, field_name, field_obj):
        field_obj.data_key = "".join(
            x.capitalize() or "_" for x in (field_obj.data_key or field_name).split("_")
        )

# Schema for UpperCamelCase (also known as Pascal case) which treats id as uppercase (e.g. MySourceID)
class CamelCaseSchemaWithCapitalId(marshmallow.Schema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_dump(pass_many=False)
    def remove_none(self, data, **kwargs):
        if isinstance(data, dict):
            return {k: v for k, v in data.items() if v is not None}
        return data

    def on_bind_field(self, field_name, field_obj):
        def process_field_word(word):
            if word == "id":
                return "ID"
            else:
                return word.capitalize()

        field_obj.data_key = "".join(
            process_field_word(x) or "_" for x in (field_obj.data_key or field_name).split("_")
        )

# Schema for lowerCamelCase (also known as dromedary case)
class LowerCamelCaseSchema(marshmallow.Schema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_dump(pass_many=False)
    def remove_none(self, data, **kwargs):
        if isinstance(data, dict):
            return {k: v for k, v in data.items() if v is not None}
        return data

    def on_bind_field(self, field_name, field_obj):
        field_obj.data_key = "".join(
            x.capitalize() or "_" for x in (field_obj.data_key or field_name).split("_")
        )
        field_obj.data_key = field_obj.data_key[0].lower() + field_obj.data_key[1:]

# Schema for UPPERCASE
class UpperCaseSchema(marshmallow.Schema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_dump(pass_many=False)
    def remove_none(self, data, **kwargs):
        if isinstance(data, dict):
            return {k: v for k, v in data.items() if v is not None}
        return data

    def on_bind_field(self, field_name, field_obj):
        field_obj.data_key = "".join(
            x.upper() or "_" for x in (field_obj.data_key or field_name).split("_")
        )

OUTPUT_CLASS = TypeVar("OUTPUT_CLASS")

class JsonSerialiser:

    @staticmethod
    def dump(data: Any) -> Union[Mapping[str, Any], Iterable[Mapping[str, Any]]]:
        """Serialize the data object to native Python data types"""
        schema = class_schema(type(data), base_schema=CamelCaseSchema)
        return schema().dump(data)

    @staticmethod
    def dumps(data: Any) -> str:
        """Serialize the data object to JSON formatted string"""
        schema = class_schema(type(data), base_schema=CamelCaseSchema)
        return schema().dumps(data)

    @staticmethod
    def load(data: Union[Mapping[str, Any], Iterable[Mapping[str, Any]]], clazz: Type[OUTPUT_CLASS]) -> OUTPUT_CLASS:
        """Deserialise from JSON form native Python data types"""
        schema = class_schema(clazz, base_schema=CamelCaseSchema)
        return schema().load(data)

    @staticmethod
    def loads(json: str, clazz: Type[OUTPUT_CLASS]) -> OUTPUT_CLASS:
        """Deserialise from JSON formatted string"""
        schema = class_schema(clazz, base_schema=CamelCaseSchema)
        return schema().loads(json)
