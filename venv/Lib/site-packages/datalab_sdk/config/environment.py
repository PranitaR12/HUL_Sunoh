import sys
import os
from enum import Enum
from typing import (
    Dict,
    List,
    Union
)


class Env:
    def __init__(self, base_url: str, audience: Union[str, None], client_id: Union[str, None]):
        self.__base_url = base_url
        self.__aud = audience
        self.__client_id = client_id

    @property
    def base_url(self):
        return self.__base_url

    @property
    def client_id(self):
        return self.__client_id

    @property
    def scope(self):
        if self.__aud is None:
            return None
        else:
            return self.__aud + "/mme"

    @property
    def audience(self):
        return self.__aud

    @staticmethod
    def get_on_platform_url() -> str:
        """ Get the correct base URL for on-platform depending on 
        whether running in a notebook or in an app. """
        if "ipykernel" in sys.modules:
            # If running in a notebook on platform, use a different base URL.
            # USER_APPS_API_URL does not return any value in notebook, and 8014 will not work.
            return os.environ.get("DATA_ACCESS_GATEWAY", "http://localhost:8010")
        else:
            # Use the User Apps API if using the SDK on platform (e.g. in a python app).
            # expect base URL to be in os env in this case
            return os.environ.get("USER_APPS_API_URL", "http://localhost:8014")


class Environment(Enum):
    DEV = "DEV"
    QA = "QA"
    STAGE = "STAGE"
    PROD = "PROD"
    ON_PLATFORM = "ON_PLATFORM"


ENV: Dict[Environment, Env] = {
    Environment.DEV: Env(
        base_url = "https://datalab-dev.unilever.com/public",
        audience = "a40ed097-7e5f-4920-93ea-c6857838418c",
        client_id = "65efef35-b8a9-403d-a8fb-1d77ece9e284",
    ),
    Environment.QA: Env(
        base_url = "https://datalab-qa.unilever.com/public",
        audience = "3f155829-4ed6-4cbf-ab5d-62dea96c4025",
        client_id = "0d795fae-b779-4961-99a9-c883538dc5d4",
    ),
    Environment.STAGE: Env(
        base_url = "https://datalab-staging.unilever.com/public",
        audience = "eae6e5ee-afd0-4580-a382-044333baff7f",
        client_id = "bee98f5f-0e72-446b-ad00-5cc767698666",
    ),
    Environment.PROD: Env(
        base_url = "https://datalab.unilever.com/public",
        audience = "e8d353be-7211-482b-8408-6df66025c3dd",
        client_id = "450c6432-f4f7-4db4-98ed-5e2ffb672493",
    ),
    Environment.ON_PLATFORM: Env(
        base_url = Env.get_on_platform_url(),
        audience = None,
        client_id = None,
    ),
}

TENANT_ID = "f66fae02-5d36-495b-bfe0-78a6ff9f8e6e"


class EnvironmentConfig:
    @staticmethod
    def __clean_join(base: str, path: str):
        stripped_path = path.lstrip("/")
        return f"{base}/{stripped_path}".rstrip("/")

    @staticmethod
    def get_mme_api_url(env: Environment, path: str) -> str:
        return EnvironmentConfig.__clean_join(f"{ENV[env].base_url}/mme", path)

    @staticmethod
    def get_chaining_api_url(env: Environment, path: str) -> str:
        return f"{ENV[env].base_url}/chaining/{path}"

    @staticmethod
    def get_chaining_api_get_url(env: Environment, path: str, argument: str) -> str:
        return f"{ENV[env].base_url}/chaining/{path}/{argument}"

    @staticmethod
    def get_minerva_rep_api_url(env: Environment, path: str, argument: str) -> str:
        return EnvironmentConfig.__clean_join(f"{ENV[env].base_url}/minerva/rpeui/api/v1",
            EnvironmentConfig.__clean_join(path, argument)
            )

    @staticmethod
    def get_tool_inventory_api_url(env: Environment, path: str, argument: str) -> str:
        return EnvironmentConfig.__clean_join(f"{ENV[env].base_url}/tool-inventory",
            EnvironmentConfig.__clean_join(path, argument)
            )

    @staticmethod
    def get_tool_session_api_url(env: Environment, path: str, argument: str) -> str:
        return EnvironmentConfig.__clean_join(f"{ENV[env].base_url}/tool-session",
            EnvironmentConfig.__clean_join(path, argument)
            )

    @staticmethod
    def get_app_logger_api_url(env: Environment, path: str, argument: str) -> str:
        return EnvironmentConfig.__clean_join(f"{ENV[env].base_url}/applogger",
            EnvironmentConfig.__clean_join(path, argument)
            )
    @staticmethod
    def get_databricks_api_url(env: Environment, path: str, argument: str) -> str:
        return EnvironmentConfig.__clean_join(f"{ENV[env].base_url}/databricks",
            EnvironmentConfig.__clean_join(path, argument)
            )
    @staticmethod
    def get_hpc_api_url(env: Environment, path: str, argument: str) -> str:
        return EnvironmentConfig.__clean_join(f"{ENV[env].base_url}/hpc",
            EnvironmentConfig.__clean_join(path, argument)
            )
    @staticmethod
    def get_sir_api_url(env: Environment, path: str, argument: str) -> str:
        return EnvironmentConfig.__clean_join(f"{ENV[env].base_url}/sir",
            EnvironmentConfig.__clean_join(path, argument)
            )
    @staticmethod
    def get_ttml_api_url(env: Environment, path: str, argument: str) -> str:
        return EnvironmentConfig.__clean_join(f"{ENV[env].base_url}/ttml",
            EnvironmentConfig.__clean_join(path, argument)
            )
    @staticmethod
    def get_sps_api_url(env: Environment, path: str, argument: str) -> str:
        return EnvironmentConfig.__clean_join(f"{ENV[env].base_url}/sps",
            EnvironmentConfig.__clean_join(path, argument)
            )
    @staticmethod
    def get_plp_api_url(env: Environment, path: str, argument: str) -> str:
        return EnvironmentConfig.__clean_join(f"{ENV[env].base_url}/plp",
            EnvironmentConfig.__clean_join(path, argument)
            )
    @staticmethod
    def get_recipe_api_url(env: Environment, path: str, argument: str) -> str:
        return EnvironmentConfig.__clean_join(f"{ENV[env].base_url}/recipe",
            EnvironmentConfig.__clean_join(path, argument)
            )
    
    @staticmethod
    def get_bulk_api_url(env: Environment, path: str, argument: str) -> str:
        return EnvironmentConfig.__clean_join(f"{ENV[env].base_url}/bulk",
            EnvironmentConfig.__clean_join(path, argument)
            )

    @staticmethod
    def get_public_api_url(env: Environment, path: str) -> str:
        return EnvironmentConfig.__clean_join(ENV[env].base_url, path)

    @staticmethod
    def get_client_id(env: Environment) -> str:
        return ENV[env].client_id

    @staticmethod
    def get_scopes(env: Environment) -> List[str]:
        return [ENV[env].scope]

    @staticmethod
    def get_appid(env: Environment) -> str:
        return ENV[env].client_id

    @staticmethod
    def get_aud(env: Environment) -> str:
        return ENV[env].audience

    @staticmethod
    def get_headers(env: Environment, token: str) -> Union[str, Dict[str, str]]:
        if env is Environment.ON_PLATFORM:
            if EnvironmentConfig.in_notebook():
                return ""
            else:
                return {"x-auth-jwt": f"{token}"}
        else:
            return {"Authorization": f"Bearer {token}"}

    @staticmethod
    def get_authority_url() -> str:
        return f"https://login.microsoftonline.com/{TENANT_ID}"

    @staticmethod
    def in_notebook():
        """
        Returns ``True`` if the module is running in IPython kernel,
        ``False`` if in IPython shell or other Python shell.
        """
        return "ipykernel" in sys.modules
